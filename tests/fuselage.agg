# test file for parametrically specified generic fuselage
#
# syntax:
#
# global block contains parameter declarations
#
# distribution block(s) contain(s) description of geometry as
# parameterized patches
#

global {
# syntax: <identifier> = <constant>
  len = 8.3
# syntax: <identifier> = "<expression>" (quotes required)
  D = "len*0.2"
  hu = 2.0 
  tlen = 3.0
  nlen = 2.5
  n1 = 0.5
  n2 = 0.5
}

# syntax: distribution("name", tmin, tmax, nt, sg, sm, ss)
#
#   name: name of surface, in quotes
#   tmin: minimum of parameter t on surface patch
#   tmax: maximum of parameter t on surface patch
#     nt: number of steps in t between tmin and tmax
#     sg: spacing in t in generating geometry
#     sm: spacing in t in generating mesh
#     ss: spacing in parameter s in generating cross-section shape

distribution ("cabin", 0.0, 1.0, 8, "linear", "linear", "cosine")

{
# syntax: transform("transform", parameters ...)
  transform("shift", -0.5, 0, "len*t")
  transform("scale", "D")

# syntax: shape("curve", parameters ...)
#  curve: "ellipse"  (closed smooth curve)
#  curve: "aerofoil" (aerofoil type shape)
  shape("ellipse", hu, 1.0, n1, n2)
}

distribution ("nose", 0.0, 1.0, 16, "cosine", "cosine", "cosine")
{
  transform("shrink", "0.5", 0, "sqrt(1.0-t^2)")
  transform("shift", -0.5, 0, "-t*nlen")
  transform("scale", "D") 
  shape("ellipse", hu, 1.0, "n1 + (0.5-n1)*t", "n2 + (0.5-n2)*t")
}

distribution ("tail", 0.0, 1.0, 8, "cosine", "cosine", "cosine")
{
  transform("shrink", 0.5, "hu*0.5^n1*0.5^n2", "(1.0-t)")
  transform("scale", "D") 
  transform("shift", -0.5, 0, "len+t*tlen")
  shape("ellipse", hu, 1.0, n1, n2) ;
}

#
