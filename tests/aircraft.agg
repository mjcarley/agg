# input file to test geometry parser in AGG
global {
 radius = 1.4
 len = 5
 root = 1.5
 span = "len*0.7"
 dihedral = "5*pi/180"
 sweep = "10*pi/180"
 taper = 0.25
 twist = "5*pi/180"
 xle = "0.35*len"
 yle = "-0.4*radius"
 del = "span/100"
}

sample("SAMPLING_COSINE", "SAMPLING_COSINE_DOUBLE")
triangulation("TRIANGULATION_GRID_REGULAR", 17, 33)

surface {
  name("fuselage")
  section(0, "circle")
  transform("translate", -0.5, 0, 0)
  transform("scale", "radius")
  transform("scale", "2*u^(0.5)*(1-u)^0.5")
  transform("translate", 0, 0, "len*u")
  axes("zxy")
}

surface {
  limits(0.3, 0.8)
  name("wing:right")
  section(0.0, "aerofoil", 0.5, 0.2, 0.0)
  section(0.3, "aerofoil", 0.5, 0.12, 0.0)
  section(0.9, "aerofoil", 0.5, 0.08, 0.0)
  #section(0, "ellipse", 0.2)
  transform("scale", "1+u*(taper-1)")
  transform("scale", "root")
  transform("rotate_z", "twist*u")
  transform("translate", "xle + span*sin(sweep)*u",
  			 "yle+span*sin(dihedral)*u",
			 "-del - span*u")
  invert()
}
 
surface {
  name("wing:left")
  section(0.0, "aerofoil", 0.5, 0.2, 0.0)
  section(0.3, "aerofoil", 0.5, 0.12, 0.0)
  section(0.9, "aerofoil", 0.5, 0.08, 0.0)
  #section(0, "ellipse", 0.2)
  transform("scale", "1+u*(taper-1)")
  transform("scale", "root")
  transform("rotate_z", "twist*u")
  transform("translate", "xle + span*sin(sweep)*u",
  			 "yle+span*sin(dihedral)*u",
			 "del + span*u")
}

